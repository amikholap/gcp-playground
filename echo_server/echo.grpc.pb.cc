// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: echo.proto

#include "echo.pb.h"
#include "echo.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace gcppg {
namespace echo {

static const char* Echo_method_names[] = {
  "/gcppg.echo.Echo/Send",
};

std::unique_ptr< Echo::Stub> Echo::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Echo::Stub> stub(new Echo::Stub(channel));
  return stub;
}

Echo::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Send_(Echo_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Echo::Stub::Send(::grpc::ClientContext* context, const ::gcppg::echo::EchoRequest& request, ::gcppg::echo::EchoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Send_, context, request, response);
}

void Echo::Stub::experimental_async::Send(::grpc::ClientContext* context, const ::gcppg::echo::EchoRequest* request, ::gcppg::echo::EchoResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Send_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::gcppg::echo::EchoResponse>* Echo::Stub::AsyncSendRaw(::grpc::ClientContext* context, const ::gcppg::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::gcppg::echo::EchoResponse>::Create(channel_.get(), cq, rpcmethod_Send_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::gcppg::echo::EchoResponse>* Echo::Stub::PrepareAsyncSendRaw(::grpc::ClientContext* context, const ::gcppg::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::gcppg::echo::EchoResponse>::Create(channel_.get(), cq, rpcmethod_Send_, context, request, false);
}

Echo::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Echo_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Echo::Service, ::gcppg::echo::EchoRequest, ::gcppg::echo::EchoResponse>(
          std::mem_fn(&Echo::Service::Send), this)));
}

Echo::Service::~Service() {
}

::grpc::Status Echo::Service::Send(::grpc::ServerContext* context, const ::gcppg::echo::EchoRequest* request, ::gcppg::echo::EchoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gcppg
}  // namespace echo

